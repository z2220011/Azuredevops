trigger:
  branches:
    include:
      - main  # mainブランチが変更されたときにパイプラインを実行
  paths:
    include:
      - variables.yml  # variables.ymlが変更された場合にのみ実行

pool:
  vmImage: 'ubuntu-latest'  # Linuxエージェントを使用

variables:
  - group: ishimaru  # Azure DevOps Libraryで定義したVariable Group名
  - name: SOURCE_FILE
    value: 'source_file.yml'  # 元のYAMLファイル
  - name: VARIABLES_FILE
    value: 'variables.yml'  # 置換する値が記載されているファイル
  - name: OUTPUT_FILE
    value: 'replaced_file.yml'  # 置換後の出力ファイル

steps:
  # GitHubリポジトリをチェックアウト
  - checkout: self

  # サーバのIPアドレスを表示
  - script: |
      set -e
      echo "エージェントのIPアドレスを取得しています..."
      echo "パブリックIPアドレス:"
      curl -s http://checkip.amazonaws.com || echo "パブリックIPアドレスを取得できませんでした"
      echo "プライベートIPアドレス:"
      ip addr show | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' || echo "プライベートIPアドレスを取得できませんでした"
    displayName: 'エージェントのIPアドレスを表示'

  # variables.yml から tenant_id と client_id を抽出
  - script: |
      set -e
      echo "variables.yml から変数を抽出しています..."
      
      # tenant_id と client_id を抽出
      TENANT_ID=$(grep 'name: tenant_id' -A 1 ${VARIABLES_FILE} | grep 'value:' | awk '{print $2}' | tr -d "'")
      CLIENT_ID=$(grep 'name: client_id' -A 1 ${VARIABLES_FILE} | grep 'value:' | awk '{print $2}' | tr -d "'")
      
      # 確認のため表示
      echo "抽出された tenant_id: ${TENANT_ID}"
      echo "抽出された client_id: ${CLIENT_ID}"
      
      # 環境変数として設定
      echo "##vso[task.setvariable variable=tenant_id]${TENANT_ID}"
      echo "##vso[task.setvariable variable=client_id]${CLIENT_ID}"
    displayName: 'variables.yml から tenant_id と client_id を抽出'

  # YAMLファイルの置換処理
  - script: |
      set -e
      echo "YAMLファイルを置換しています..."

      # 環境変数を取得
      echo "置換する tenant_id: $(tenant_id)"
      echo "置換する client_id: $(client_id)"
      
      # ファイルコピー
      cp ${SOURCE_FILE} ${OUTPUT_FILE}
      
      # sed で変数を置換 (エスケープして安全に処理)
      sed -i "/name: tenant_id/{n;s/value:.*/value: '$(echo "${tenant_id}" | sed 's/[\/&]/\\&/g')'/}" ${OUTPUT_FILE} || { echo "tenant_id の置換に失敗しました"; exit 1; }
      sed -i "/name: client_id/{n;s/value:.*/value: '$(echo "${client_id}" | sed 's/[\/&]/\\&/g')'/}" ${OUTPUT_FILE} || { echo "client_id の置換に失敗しました"; exit 1; }

      # 置換後の内容を表示
      echo "置換後のファイル内容:"
      cat ${OUTPUT_FILE}
    displayName: 'YAMLファイルを置換'

  # 置換後のファイルをartifactとして保存
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(OUTPUT_FILE)'  # 置換後のファイル
      ArtifactName: 'replaced-files'  # artifact名
      publishLocation: 'Container'  # Artifactの保存先
    displayName: 'Artifactとして置換後のファイルを保存'
